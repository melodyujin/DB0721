7/19
//삽입 작업을 하는 프로시저
//Book테이블에 한 개의 투플을 삽입하는 프로시저
CREATE OR REPLACE PROCEDURE InsertBook(
     myBookID IN NUMBER,
     myBookName IN VARCHAR2,
     myPublisher IN VARCHAR2,
     myPrice IN NUMBER)
AS
BEGIN
     INSERT INTO Book(bookid, bookname, publisher, price)
     VALUES(myBookID, myBookName, myPublisher, myPrice);
END;

EXEC InsertBook(13, '스포츠과학', '마당과학서적', 25000);
SELECT * FROM Book;

//반복 제어문
//FOR LOOP
//16-19.WHILE LOOP 사용하기
set serverout on;
begin
    for i in reverse 0..4 loop
        dbms_output.put_line(i);
    end loop;
end;
/     

//구구단 출력
declare
begin
    for dan in 2 .. 9
    loop
        for idx in 1 .. 9
        loop
            dbms_output.put_line(dan || ' X ' || idx || ' = ' || (dan * idx));
        end loop;
        dbms_output.put_line('----------------------------------');
    end loop;
end;

//CONTINUE문
//16-19.FOR LOOP 안에 CONTINUE문 사용하기
begin
    for i in 0..4 loop
        continue when mod(i,2)=1;
        dbms_output.put_line('현재 i의 값:' || i);
    end loop;
end;
/

//Q1.숫자1부터 10까지의 숫자 중 오른쪽과 같이 홀수만 출력하는 PL/SQL 프로그램을 작성
BEGIN
   FOR i IN 1..10 LOOP
      CONTINUE WHEN MOD(i, 2) = 0;
      DBMS_OUTPUT.PUT_LINE('현재 i의 값 : ' || i);
      END LOOP;
END;
/

//Q2.DEPT 테이블의 DEPTNO와 자료형이 같은 변수 V_DEPTNO를 선언
//그리고 V_DEPTNO 변수 값에 10,20,30,40을 대입했을 때 다음과 같이 부서 이름을 출력하는 프로그램 작성
//단 부서 번호가 10,20,30,40이 아니면 N/A로 출력
DECLARE
   V_DEPTNO DEPT.DEPTNO%TYPE := 10;
BEGIN
   CASE V_DEPTNO
      WHEN 10 THEN DBMS_OUTPUT.PUT_LINE('DNAME : ACCOUNTING');
      WHEN 20 THEN DBMS_OUTPUT.PUT_LINE('DNAME : RESEARCH');
      WHEN 30 THEN DBMS_OUTPUT.PUT_LINE('DNAME : SALES');
      WHEN 40 THEN DBMS_OUTPUT.PUT_LINE('DNAME : OPERATIONS');
      ELSE         DBMS_OUTPUT.PUT_LINE('DNAME : N/A');
   END CASE;
END;
/

//결과를 반환하는 프로시저
//Book 테이블에 저장된 도서의 평균가격을 반환하는  프로시저
CREATE OR REPLACE PROCEDURE AveragePrice(
   AverageVal OUT NUMBER)
 AS
 BEGIN
    SELECT AVG(price) INTO AverageVal FROM Book WHERE price IS NOT
 NULL;
 END;

SET SERVEROUTPUT ON ;
  DECLARE
     AverageVal NUMBER;
  BEGIN
      AveragePrice(AverageVal);
     DBMS_OUTPUT.PUT_LINE('책값 평균: '|| AverageVal);
  END;


//커서를 사용하는 프로시저
CREATE OR REPLACE PROCEDURE Interest
 AS
    myInterest NUMERIC;
    Price NUMERIC;
    CURSOR InterestCursor IS SELECT saleprice FROM Orders;
 BEGIN
   myInterest := 0.0;
   OPEN InterestCursor;
   LOOP
       FETCH InterestCursor INTO Price;
       EXIT WHEN InterestCursor%NOTFOUND;
       IF Price >= 30000 THEN
           myInterest := myInterest + Price * 0.1;
       ELSE
           myInterest := myInterest + Price * 0.05;
       END IF;
    END LOOP;
    CLOSE InterestCursor;
    DBMS_OUTPUT.PUT_LINE(' 전체 이익 금액 = ' || myInterest);
 END;

//트리거
//새로운 도서를 삽입한 후 자동으로 Book_log 테이블에 삽입한 내용을 기록하는 트리거
//Book log 테이블 생성
CREATE TABLE Book_log(
        bookid_l NUMBER,
        bookname_l VARCHAR2(40),
        publisher_l VARCHAR2(40),
        price_l NUMBER);

CREATE OR REPLACE TRIGGER AfterInsertBook
 AFTER INSERT ON Book FOR EACH ROW
 DECLARE
     average NUMBER;
 BEGIN
     INSERT INTO Book_log
        VALUES(:new.bookid, :new.bookname, :new.publisher, :new.price);
     DBMS_OUTPUT.PUT_LINE('삽입 투플을 Book_log 테이블에 백업..');
 END; 

//삽입한 내용을 기록하는 트리거 확인
INSERT INTO Book VALUES(14, '스포츠 과학 1', '이상미디어', 25000);
//결과 확인
SELECT * FROM Book WHERE bookid='14';
SELECT * FROM Book_log WHERE bookid_l='14'; 

//사용자 정의 함수(fnc_Interest)
//판매된 도서에 대한 이익을 계산하는 함수
CREATE OR REPLACE FUNCTION fnc_Interest(
    price NUMBER) RETURN INT
IS
    myInterest NUMBER;
BEGIN
 /* 가격이 30,000원 이상이면 10%, 30,000원 미만이면 5% */
  IF Price >= 30000 THEN myInterest := Price * 0.1;
  ELSE myInterest := Price * 0.05;
  END IF;
  RETURN myInterest;
END;

SELECT custid, orderid, saleprice, fnc_Interest(saleprice) interest
FROM Orders;
